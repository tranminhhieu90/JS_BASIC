// T√¨m ki·∫øm ph·∫ßn t·ª≠
// Nh√≥m h√†m ki·ªÉm tra ph·∫ßn t·ª≠ c√≥ t·ªìn t·∫°i kh√¥ng?
// # Name Desc
// 1 find(callbackFn) T√¨m ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n tho·∫£ ƒëi·ªÅu ki·ªán
// 2 findIndex(callbackFn) T√¨m v·ªã tr√≠ c·ªßa ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n tho·∫£ ƒëi·ªÅu ki·ªán
[2, 1, 3].find((x) => x % 2 === 0); // 2
[2, 1, 3].findIndex((x) => x % 2 === 0); // 0
['easy', 'frontend'].find((x) => x.length > 4); // 'frontend'
['easy', 'frontend'].findIndex((x) => x.length > 4);
1;
// Tham kh·∫£o: https://developer.mozilla.org/enUS/docs/Web/JavaScript/Reference/Global_Objects/Array/find
// Callback l√† g√¨?
// A callback function is a function passed into another function as an argument, which is then invoked
// inside the outer function to complete some kind of routine or action.
// T·∫°m d·ªãch n√¥m na, callback l√† tham s·ªë c·ªßa h√†m c√≥ ki·ªÉu d·ªØ li·ªáu l√† h√†m ü§£ .
function main(callbackFn) {
  // processing ...
  // do another stuff
  callbackFn();
}
function callback() {
  console.log('call me when needed');
}
main(callback);
function main(onFinish) {
  let sum = 0;
  for (let i = 0; i < 10; i++) {
    sum += i;
  }
  onFinish(sum);
}
function handleOnFinish(sum) {
  console.log('Sum is:', sum);
}
main(handleOnFinish);
